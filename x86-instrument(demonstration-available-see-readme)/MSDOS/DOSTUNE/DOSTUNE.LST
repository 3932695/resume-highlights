Microsoft (R) Macro Assembler Version 6.11		    01/01/14 01:23:06
DOSTUNES	(DOSTUNES.ASM)				     Page 1 - 1


				TITLE DOSTUNES	(DOSTUNES.ASM)

				INCLUDE Irvine16.inc
			      C ; Irvine16.inc - Include file for programs using
			      C ; the Irvine16.lib (Real-address mode library).
			      C 
			      C ; Last update: 7/29/05
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.8086			

 = 4C00				TERMINATE = 4C00h
 = 0021				CALLDOS = 21h
 = 0010				CALLBIOS = 10h
 = 0061				SPEAKER_PORT = 61h
 = 0003				SPEAKER_ON = 3h
 = 0040				DOSDATA = 40h
 = 0017				KEYFLAG = 17h
 = 0003				SHIFT = 3
 = 0004				CTRL = 4
 = 0008				ALT = 8
 = 0050				BUFFER_SIZE = 80
 0000				.data
 0000 00			SetOn BYTE 0
				; OutputName db "output.asm", 0			; Recorded output goes here
				; InputName db "data.asm", 0
 0001 0000			FileHandle dw ?						; Store file handle here
 0003 01B8			LastFreq WORD 440
 0005 0000			LastKey WORD ?
 0007 002E			CharBuffer dw "."
 0009 020B 022A 024B 026E	HighNotes	WORD 523, 554, 587, 622, 659, 698, 740, 783, 831, 880, 932, 988, 1047, 1109, 1175, 1245, 1319, 1397, 1480, 1568, 
       0293 02BA 02E4
       030F 033F 0370
       03A4 03DC 0417
       0455 0497 04DD
       0527 0575 05C8
       0620 020B 022A
       024B 026E 0293
       02BA 02E4 030F
       033F 0370 03A4
       03DC 0417 0455
       0497 04DD 0527
       0575 05C8 0620
				523, 554, 587, 622, 659, 698, 740, 783, 831, 880, 932, 988, 1047, 1109, 1175, 1245, 1319, 1397, 1480, 1568

 0059 01EE 01D2 01B8 019F	LowNotes	WORD 494, 466, 440, 415, 392, 370, 349, 330, 311, 294, 277, 262, 247, 233, 220, 208, 196,
       0188 0172 015D
       014A 0137 0126
       0115 0106 00F7
       00E9 00DC 00D0
       00C4 01EE 01D2
       01B8 019F 0188
       0172 015D 014A
       0137 0126 0115
       0106 00F7 00E9
       00DC 00D0 00C4
				494, 466, 440, 415, 392, 370, 349, 330, 311, 294, 277, 262, 247, 233, 220, 208, 196

 009D 1071 0332 1177 0433	HighKeys	WORD 1071h, 332h, 1177h, 433h, 1265h, 1372h, 635h, 1474h, 736h, 1579h, 837h, 1675h, 1769h, 0A39h, 186Fh, 0B30h, 1970h, 1A5Bh, 0D3Dh, 1B5Dh, 
       1265 1372 0635
       1474 0736 1579
       0837 1675 1769
       0A39 186F 0B30
       1970 1A5B 0D3D
       1B5D 1051 0340
       1157 0423 1245
       1352 0625 1454
       075E 1559 0826
       1655 1749 0A28
       184F 0B29 1950
       1A7B 0D2B 1B7D
				4177, 832, 4439, 1059, 4677, 4946, 1573, 5204, 1886, 5465, 2086, 5717, 5961, 2600, 6223, 2857, 6480, 6779, 3371, 7037

 00ED 352F 273B 342E 266C	LowKeys 	WORD 352Fh, 273Bh, 342Eh, 266Ch, 332Ch, 256Bh, 326Dh, 316Eh, 2368h, 3062h, 2267h, 2F76h, 2E63h, 2064h, 2D78h, 1F73h, 2C7Ah,
       332C 256B 326D
       316E 2368 3062
       2267 2F76 2E63
       2064 2D78 1F73
       2C7A 353F 273A
       343E 264C 333C
       254B 324D 314E
       2348 3042 2247
       2F56 2E43 2044
       2D58 1F53 2C5A
				13631, 10042, 13374, 9804, 13116, 9547, 12877, 12622, 9032, 12354, 8775, 12118, 11843, 8260, 11608, 8019, 11354
 0000				.code

 0000				MyDelay PROC
 0000  50					push ax
 0001  53					push bx
 0002  51					push cx
 0003  52					push dx
 0004  E8 0041					call CalcDelay	; Takes milliseconds in AX and converts to format...
				;		call Delay	; employed by DOS interrupt 2Ch
 0007  E8 0005					call TrueDelay	; Takes hrs:mins in AX and secs:milli in BX and...
								; pauses program for that length of time
 000A  5A					pop dx
 000B  59					pop cx
 000C  5B					pop bx
 000D  58					pop ax
 000E  C3					ret
 000F				MyDelay ENDP

 000F				TrueDelay PROC
 000F  50					push ax
 0010  B4 2C					mov ah, 2Ch
 0012  CD 21					int 21h
 0014  58					pop ax
 0015  03 C1					add ax, cx
 0017  03 DA					add bx, dx	
								; Converting time bases into 60/60/100 (hrs/mins/secs)
 0019  80 FB 64					cmp bl, 64h	; Convert 100 centiseconds to 1 second
 001C  7C 07					jl Skip1
 001E  81 C3 0100				add bx, 0100h
 0022  80 EB 64					sub bl, 64h
 0025					Skip1:
 0025  81 FB 3C00				cmp bx, 3C00h	; Convert 60 seconds to 1 minute
 0029  7C 05					jl Skip2
 002B  40					inc ax
 002C  81 EB 3C00				sub bx, 3C00h
 0030					Skip2:
 0030  3C 3C					cmp al, 3Ch 	; Convert 60 minutes to 1 hour
 0032  7C 05					jl DelayTop
 0034  05 0100					add ax, 0100h
 0037  2C 3C					sub al, 3Ch	

 0039					DelayTop:			; Loops indefinitely, with current time >= saved time
 0039  50					push ax		; ...as exit condition
 003A  B4 2C					mov ah, 2Ch
 003C  CD 21					int 21h
 003E  58					pop ax
 003F  3B C1					cmp ax, cx
 0041  75 F6					jne DelayTop
 0043  3B DA					cmp bx, dx
 0045  77 F2					ja DelayTop 

 0047  C3					ret
 0048				TrueDelay ENDP

 0048				CalcDelay PROC
 0048  8B C8				mov cx, ax
 004A  B8 0000				mov ax, 0
 004D  BB 0000				mov bx, 0
 0050  B2 00				mov dl, 0
 0052				top:			; As many loops here as there are milliseconds
							; Loop checks for carry instances with every added...
							; millisecond
 0052  83 F9 00					cmp cx, 0
 0055  74 22					je skip
 0057  49					dec cx
 0058  FE C2					inc dl
 005A  80 FA 0A					cmp dl, 0Ah
 005D  75 F3					jne top
 005F  43					inc bx
 0060  B2 00					mov dl, 0
 0062  80 FB 64					cmp bl, 64h
 0065  75 EB					jne top
 0067  81 C3 0100				add bx, 0100h
 006B  B3 00					mov bl, 0
 006D  81 FB 3C00				cmp bx, 3C00h
 0071  75 DF					jne top
 0073  40					inc ax
 0074  BB 0000					mov bx, 0
					;	cmp al, 3Ch		; Passed input cannot exceed 65.535 seconds
					;	jne top			; Calculating hours isn't necessary
					;	add ax, 0100h
					;	mov al, 0
 0077  EB D9					jmp top
 0079					skip:
 0079  C3					ret
 007A				CalcDelay ENDP

 007A				PlayState PROC

 007A  B4 3D					mov ah, 3Dh			; Open existing file
 007C  B0 00					mov al, 0			; Read
 007E  8D 16 019B R				lea dx, [buffer + 2]; Link to this file name
 0082  CD 21					int 21h
 0084  A3 0001 R				mov FileHandle, ax 	; Save file handler
 0087  72 29					jc EOF
						
 0089  E8 002A					call SpeakerOn
 008C					PlayTop:
 008C  B4 3F					mov	ah, 3Fh			; Read from file interrupt
 008E  8B 1E 0001 R				mov	bx, Filehandle	; Accepts handler in bx
 0092  B9 0002					mov	cx, 2			; Read one byte
 0095  8D 16 0007 R				lea	dx, [CharBuffer]; Buffer for data
 0099  CD 21					int	21h
 009B  3B C1					cmp	ax, cx			; Check for end-of-file
 009D  75 13					jne	EOF

 009F  A1 0007 R				mov ax, CharBuffer
				;		cmp ax, LastKey
				;		je PlaySkip
 00A2  E8 014B					call CalcNoteFreq
 00A5  E8 0033					call SetSpeakerFrequency
 00A8  50					push ax
 00A9  B8 0064					mov ax, 100
 00AC  E8 FF51					call MyDelay
 00AF  58					pop ax
				;	PlaySkip:
				;		mov LastKey, ax
 00B0  EB DA					jmp PlayTop

 00B2					EOF:
 00B2  E8 000A					call SpeakerOff
 00B5  C3					ret
 00B6				PlayState ENDP
					
 00B6				SpeakerOn PROC
 00B6  50				push	ax
				; .data
				; TurningOn BYTE "Turning on speaker...", 0dh, 0ah, 0
				; .code

					; push	dx					;
					; mov	dx, offset TurningOn	;
					; ;call	WriteString			; Write "Turning on speaker..."
					; pop	dx						;
					
 00B7  E4 61				in	al, SPEAKER_PORT		; Get speaker status
 00B9  0C 03				or	al, SPEAKER_ON
 00BB  E6 61				out	SPEAKER_PORT, al
					
 00BD  58				pop	ax
 00BE  C3				ret
 00BF				SpeakerOn ENDP
					
 00BF				SpeakerOff PROC
 00BF  50				push	ax
				; .data
				; TurningOff BYTE "Turning off speaker...", 0dh, 0ah, 0
				; .code
					; push	dx
					; mov	dx, offset TurningOff
					; ;call	WriteString
					; pop	dx
 00C0  E4 61				in	al, SPEAKER_PORT	; Get speaker status
 00C2  24 FC				and	al, not SPEAKER_ON
 00C4  E6 61				out	SPEAKER_PORT, al
 00C6  58				pop	ax
 00C7  C3				ret
 00C8				SpeakerOff ENDP

 = 0043				TIMER_CONTROL_PORT = 43h
 = 00B6				TIMER_READY = 0B6h
 = 0042				TIMER_DATA_PORT = 42h
					
 00C8				SetTimerCount PROC 						; AX - count to set the timer to
 00C8  50					push	ax
 00C9  52					push	dx
 00CA  8B D0					mov	dx, ax
 00CC  B0 B6					mov	al, TIMER_READY
 00CE  E6 43					out	TIMER_CONTROL_PORT, al
 00D0  8A C2					mov	al, dl
 00D2  E6 42					out	TIMER_DATA_PORT, al
 00D4  8A C6					mov	al, dh
 00D6  E6 42					out	TIMER_DATA_PORT, al
 00D8  5A					pop	dx
 00D9  58					pop	ax
 00DA  C3					ret
 00DB				SetTimerCount ENDP

 00DB				SetSpeakerFrequency PROC				; AX - frequency to generate on speaker
 0131					.data
 0131 53 65 74 74 69 6E			SettingFreq BYTE "Setting speaker frequency", 0dh, 0ah, 0
       67 20 73 70 65 61
       6B 65 72 20 66 72
       65 71 75 65 6E 63
       79 0D 0A 00
 014D 001234DC				CLK_FREQ DWORD 1193180				;CLK_FREQ DWORD 0b61098h
 00DB					.code
						; push	dx						;
						; mov	dx, offset SettingFreq		;
						; call	WriteString				;
						; mov	dx, ax						; Unnecessary line?
						; pop	dx							;
						
 00DB  50					push	ax						
 00DC  51					push	cx
 00DD  52					push	dx
						
 00DE  8B C8					mov	cx, ax						; CX now contains frequency
 00E0  A1 014D R				mov	AX, WORD PTR CLK_FREQ		; AX contains the magic number
 00E3  8B 16 014F R				mov	DX, WORD PTR CLK_FREQ[2]	; ...which overflows into DX
 00E7  F7 F1					div	cx							; AX = DX:AX / CX (DX = remainder)
						
 00E9  E8 FFDC					call	SetTimerCount
 00EC  5A					pop	dx
 00ED  59					pop	cx
 00EE  58					pop	ax
 00EF  C3					ret
 00F0				SetSpeakerFrequency ENDP

 00F0				HoldIt PROC
 0151					.data
 0151 50 6C 61 79 69 6E			Waiting BYTE "Playing A440 pitch standard...", 0dh, 0ah, 0
       67 20 41 34 34 30
       20 70 69 74 63 68
       20 73 74 61 6E 64
       61 72 64 2E 2E 2E
       0D 0A 00
 00F0					.code
 00F0  52					push	dx
 00F1  BA 0151 R				mov	dx, offset Waiting
 00F4  E8 0000 E				call	WriteString
 00F7  5A					pop	dx
						
 00F8  50					push ax
 00F9  B8 01F4					mov ax, 500
 00FC  E8 FF01					call MyDelay
 00FF  58					pop ax
						
 0172					.data
 0172 57 65 6C 63 6F 6D			DoneWaiting BYTE "Welcome to DOSTUNES!", 0dh, 0ah, 0
       65 20 74 6F 20 44
       4F 53 54 55 4E 45
       53 21 0D 0A 00
 0100					.code
 0100  52					push	dx
 0101  BA 0172 R				mov	dx, offset DoneWaiting
 0104  E8 0000 E				call	WriteString
 0107  5A					pop	dx
						
 0108  C3					ret
 0109				HoldIt ENDP

 0109				FluteState PROC
 0109  50					push ax
 010A  06					push es
 010B  B8 0040					mov ax, DOSDATA
 010E  8E C0					mov es, ax
 0110  E8 0051					call CreateFile
						
					; ---- Main Loop ----
 0113					FluteTop:	
 0113  C6 06 0000 R 00				mov [SetOn], 0
 0118  26: A0 0017				mov al, es:[KEYFLAG]			; When did we learn this location?
														; Is there a similar location for key presses?
 011C  A8 04					test al, CTRL
 011E  74 02					jz SkipExit
 0120  EB 3C					jmp break
 0122					SkipExit:
							
 0122  A8 03					test al, SHIFT
 0124  74 05					jz SkipPlay
 0126  C6 06 0000 R 01				mov [SetOn], 1
 012B					SkipPlay:
						
 012B  50					push ax
 012C  52					push dx
						
						
 012D  B4 01					mov ah, 1
 012F  CD 16					int 16h
 0131  74 0D					jz SkipCheck
 0133  B4 00					mov ah, 0
 0135  CD 16					int 16h
					;	ax now contains key pressed
 0137  E8 00B6					call CalcNoteFreq
					;	ax now contains frequency
 013A  A3 0003 R				mov [LastFreq], ax
 013D  E8 FF9B					call SetSpeakerFrequency

 0140					SkipCheck:
 0140  5A					pop dx
 0141  58					pop ax
						
 0142  80 3E 0000 R 00				cmp SetOn, 0
 0147  74 10					je mute
 0149  E8 FF6A					call SpeakerOn
 014C  E8 0029					call WriteNotes
 014F  50					push ax
 0150  B8 00C8					mov ax, 200
 0153  E8 FEAA					call MyDelay
 0156  58					pop ax
 0157  EB BA					jmp FluteTop
 0159					mute:
 0159  E8 FF63					call SpeakerOff
 015C  EB B5					jmp FluteTop
					; ---- Main Loop ----
						
 015E					break:
 015E  E8 FF5E					call SpeakerOff
 0161  07					pop es
 0162  58					pop ax
 0163  C3					ret
 0164				FluteState ENDP

 0164				CreateFile PROC
 0164  50					push ax
 0165  51					push cx
 0166  52					push dx
						
 0167  B4 3C					mov ah, 3Ch
 0169  B9 0000					mov cx, 0
 016C  BA 019B R				mov dx, OFFSET [buffer + 2]
 016F  CD 21					int 21h
						
 0171  A3 0001 R				mov FileHandle, ax
						
 0174  5A					pop dx
 0175  59					pop cx
 0176  58					pop ax
 0177  C3					ret
 0178				CreateFile ENDP

 0178				WriteNotes PROC
 0178  50					push ax
 0179  53					push bx
 017A  51					push cx
 017B  52					push dx
						
 017C  A1 0003 R				mov ax, LastFreq
						;---- HIGH NOTES
 017F  B9 0028					mov cx, lengthof HighKeys
 0182  BE 0000					mov si, 0
 0185					WriteHighTop:
 0185  8B 9C 0009 R				mov bx, HighNotes[si]
 0189  3B C3					cmp ax, bx
 018B  75 06					jne WriteHighSkip
 018D  8B 84 009D R				mov ax, HighKeys[si]
 0191  EB 1F					jmp WriteBreak
 0193					WriteHighSkip:
 0193  46					inc si
 0194  46					inc si
 0195  E2 EE					loop WriteHighTop
						;---- HIGH NOTES
						;---- LOW NOTES
 0197  B9 0022					mov cx, lengthof LowKeys
 019A  BE 0000					mov si, 0
 019D					WriteLowTop:
 019D  8B 9C 0059 R				mov bx, LowNotes[si]
 01A1  3B C3					cmp ax, bx
 01A3  75 06					jne WriteLowSkip
 01A5  8B 84 00ED R				mov ax, LowKeys[si]
 01A9  EB 07					jmp WriteBreak
 01AB					WriteLowSkip:
 01AB  46					inc si
 01AC  46					inc si
 01AD  E2 EE					loop WriteLowTop
						;---- LOW NOTES
 01AF  B8 0021					mov ax, "!"
 01B2					WriteBreak:
					
 01B2  A3 0007 R				mov [CharBuffer], ax
					
 01B5  B4 40					mov ah, 40h
 01B7  8B 1E 0001 R				mov bx, FileHandle
 01BB  B9 0002					mov cx, 2
 01BE  BA 0007 R				mov dx, OFFSET CharBuffer
 01C1  CD 21					int 21h
						
 01C3  5A					pop dx
 01C4  59					pop cx
 01C5  5B					pop bx
 01C6  58					pop ax
 01C7  C3					ret
 01C8				WriteNotes ENDP

 01C8				MyWriteInt PROC							; Prints hexadecimals words in AX
 0189					.data
 0189 30 31 32 33 34 35			hexArray BYTE	"0123456789ABCDEF"
       36 37 38 39 41 42
       43 44 45 46
 01C8					.code
 01C8  50					push ax
 01C9  53					push bx
 01CA  51					push cx
 01CB  52					push dx
						
 01CC  BB 0000					mov	bx, 0	
 01CF					MyNext:								; Divide by base and push remainder to stack...
 01CF  43					inc bx							; ...to get all the digits
 01D0  BA 0000					mov	dx, 0
 01D3  B9 000A					mov cx, 10						; Set to base 10
 01D6  F7 F1					div	cx
 01D8  52					push dx	
 01D9  83 F8 00					cmp ax, 0
 01DC  75 F1					jne	MyNext
						
 01DE  8B CB					mov	cx, bx						; Keeping track of how many pushes
 01E0					MyTop:
 01E0  5E					pop	si							; Now pop and print
 01E1  8A 84 0189 R				mov	al, hexArray[si]
 01E5  B4 0E					mov	ah, 0Eh
 01E7  CD 10					int	10h
 01E9  E2 F5					loop MyTop
						
 01EB  5A					pop dx
 01EC  59					pop cx
 01ED  5B					pop bx
 01EE  58					pop ax
 01EF  C3					ret
 01F0				MyWriteInt ENDP

 01F0				CalcNoteFreq PROC
 01F0  51					push cx
 01F1  56					push si
 01F2  53					push bx
						;---- HIGH NOTES
 01F3  B9 0028					mov cx, lengthof HighKeys
 01F6  BE 0000					mov si, 0
 01F9					HighTop:
 01F9  8B 9C 009D R				mov bx, HighKeys[si]
 01FD  3B C3					cmp ax, bx
 01FF  75 06					jne HighSkip
 0201  8B 84 0009 R				mov ax, HighNotes[si]
 0205  EB 1F					jmp Break
 0207					HighSkip:
 0207  46					inc si
 0208  46					inc si
 0209  E2 EE					loop HighTop
						;---- HIGH NOTES
						;---- LOW NOTES
 020B  B9 0022					mov cx, lengthof LowKeys
 020E  BE 0000					mov si, 0
 0211					LowTop:
 0211  8B 9C 00ED R				mov bx, LowKeys[si]
 0215  3B C3					cmp ax, bx
 0217  75 06					jne LowSkip
 0219  8B 84 0059 R				mov ax, LowNotes[si]
 021D  EB 07					jmp Break
 021F					LowSkip:
 021F  46					inc si
 0220  46					inc si
 0221  E2 EE					loop LowTop
						;---- LOW NOTES
 0223  B8 5F90					mov ax, 90000
 0226					Break:
 0226  5B					pop bx
 0227  5E					pop si
 0228  59					pop cx
 0229  C3					ret
 022A				CalcNoteFreq ENDP

 022A				SafeRead PROC
				; Allows user to enter (via keyboard) a string of characters to buffer
 022A  50				push ax
 022B  53				push bx
 022C  52				push dx

 022D  B4 0A				mov ah, 0Ah		; Read keyboard input and store into buffer
 022F  BA 0199 R			mov dx, OFFSET buffer
 0232  CD 21				int 21h
					
 0234  BB 0000				mov bx, 0		; Attach null-terminate character
 0237  8A 1E 019A R			mov bl, buffer[1]
 023B  C6 87 019B R 00			mov buffer[bx+2], 0

 0240  5A				pop dx
 0241  5B				pop bx
 0242  58				pop ax
 0243  C3				ret
 0244				SafeRead ENDP

 0199					.data
 0199 50 00				buffer 		DB 	BUFFER_SIZE, ?, BUFFER_SIZE DUP (0)
       0050 [
        00
       ]
 01EB 54 79 70 65 20 27			mainprompt BYTE "Type 'r' to record, type 'p' to playback, type 'e' to exit.", 0dh, 0ah, 0
       72 27 20 74 6F 20
       72 65 63 6F 72 64
       2C 20 74 79 70 65
       20 27 70 27 20 74
       6F 20 70 6C 61 79
       62 61 63 6B 2C 20
       74 79 70 65 20 27
       65 27 20 74 6F 20
       65 78 69 74 2E 0D
       0A 00
 0229 4E 61 6D 65 20 79			fluteprompt BYTE "Name your recording?", 0dh, 0ah, 0
       6F 75 72 20 72 65
       63 6F 72 64 69 6E
       67 3F 0D 0A 00
 0240 27 53 68 69 66 74			recordinstruct BYTE "'Shift' writes note. Keyboard adjusts pitch. Hit 'ctrl' when done.", 0dh, 0ah, 0
       27 20 77 72 69 74
       65 73 20 6E 6F 74
       65 2E 20 4B 65 79
       62 6F 61 72 64 20
       61 64 6A 75 73 74
       73 20 70 69 74 63
       68 2E 20 48 69 74
       20 27 63 74 72 6C
       27 20 77 68 65 6E
       20 64 6F 6E 65 2E
       0D 0A 00
 0285 4E 61 6D 65 20 6F			playprompt BYTE "Name of recording to playback?", 0dh, 0ah, 0
       66 20 72 65 63 6F
       72 64 69 6E 67 20
       74 6F 20 70 6C 61
       79 62 61 63 6B 3F
       0D 0A 00
 0244					.code
 0244				main PROC
 0244  B8 ---- R				mov	ax, @data
 0247  8E D8					mov	ds, ax
						
						
 0249  E8 FE6A					call	SpeakerOn

 024C  B8 01B8					mov	ax, 440							; AX contains frequency input
 024F  E8 FE89					call	SetSpeakerFrequency			; AX contains frequency
 0252  E8 FE9B					call	HoldIt						; Hold note
 0255  E8 FE67					call 	SpeakerOff
						
 0258					MenuLoop:
 0258  BA 01EB R				mov dx, OFFSET mainprompt
 025B  E8 0000 E				call WriteString
 025E  E8 FFC9					call SafeRead
						
 0261  80 3E 019B R 72				cmp buffer[2], 'r'					; Record mode
 0266  75 14					jne SkipFluteState
 0268  BA 0229 R				mov dx, OFFSET fluteprompt
 026B  E8 0000 E				call WriteString
 026E  E8 FFB9					call SafeRead

 0271  BA 0240 R				mov dx, OFFSET recordinstruct
 0274  E8 0000 E				call WriteString
 0277  E8 FE8F					call FluteState
 027A  EB 1C					jmp escape
 027C					SkipFluteState:
					
						
 027C  80 3E 019B R 70				cmp buffer[2], 'p'
 0281  75 0E					jne SkipPlayState
 0283  BA 0285 R				mov dx, OFFSET playprompt
 0286  E8 0000 E				call WriteString
 0289  E8 FF9E					call SafeRead

 028C  E8 FDEB					call PlayState
 028F  EB 07					jmp escape
 0291					SkipPlayState:
 0291  80 3E 019B R 65				cmp buffer[2], 'e'
 0296  75 C0					jne MenuLoop
 0298					escape:
 0298  B8 4C00					mov	ax, TERMINATE
 029B  CD 21					int	CALLDOS
						

 029D				main ENDP
				END main
Microsoft (R) Macro Assembler Version 6.11		    01/01/14 01:23:06
DOSTUNES	(DOSTUNES.ASM)				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CursorPosStruc . . . . . . . . .	 0002
  Ycoord . . . . . . . . . . . .	 0000	     Byte
  Xcoord . . . . . . . . . . . .	 0001	     Byte
ExtGetDskFreSpcStruc . . . . . .	 002C
  StructSize . . . . . . . . . .	 0000	     Word
  Level  . . . . . . . . . . . .	 0002	     Word
  SectorsPerCluster  . . . . . .	 0004	     DWord
  BytesPerSector . . . . . . . .	 0008	     DWord
  AvailableClusters  . . . . . .	 000C	     DWord
  TotalClusters  . . . . . . . .	 0010	     DWord
  AvailablePhysSectors . . . . .	 0014	     DWord
  TotalPhysSectors . . . . . . .	 0018	     DWord
  AvailableAllocationUnits . . .	 001C	     DWord
  TotalAllocationUnits . . . . .	 0020	     DWord
  Rsvd . . . . . . . . . . . . .	 0024	     DWord
FPU_ENVIRON  . . . . . . . . . .	 001C
  controlWord  . . . . . . . . .	 0000	     Word
  statusWord . . . . . . . . . .	 0004	     Word
  tagWord  . . . . . . . . . . .	 0008	     Word
  instrPtrLow  . . . . . . . . .	 000C	     Word
  opcodeAndInstrPtrHi  . . . . .	 0010	     DWord
  operandPtrLow  . . . . . . . .	 0014	     Word
  operandPtrHi . . . . . . . . .	 0018	     DWord
TimeRecord . . . . . . . . . . .	 0004
  hours  . . . . . . . . . . . .	 0000	     Byte
  minutes  . . . . . . . . . . .	 0001	     Byte
  seconds  . . . . . . . . . . .	 0002	     Byte
  hhss . . . . . . . . . . . . .	 0003	     Byte
VideoInfoStruc . . . . . . . . .	 0041
  supportedInfoPtr . . . . . . .	 0000	     DWord
  videoMode  . . . . . . . . . .	 0004	     Byte
  numCharColumns . . . . . . . .	 0005	     Word
  videoBufferLen . . . . . . . .	 0007	     Word
  videoBufferStartPtr  . . . . .	 0009	     Word
  cursors  . . . . . . . . . . .	 000B	     Word
  cursorStartLine  . . . . . . .	 001B	     Byte
  cursorEndLine  . . . . . . . .	 001C	     Byte
  activeDisplayPage  . . . . . .	 001D	     Byte
  adapterBasePortAddr  . . . . .	 001E	     Word
  currentRegister3B8or3D8  . . .	 0020	     Byte
  currentRegister3B9or3D9  . . .	 0021	     Byte
  numCharRows  . . . . . . . . .	 0022	     Byte
  characterScanHeight  . . . . .	 0023	     Word
  activeDisplayCode  . . . . . .	 0025	     Byte
  inactiveDisplayCode  . . . . .	 0026	     Byte
  numberOfColors . . . . . . . .	 0027	     Word
  numberOfVideoPages . . . . . .	 0029	     Byte
  numberOfScanLines  . . . . . .	 002A	     Word
  primaryCharBlock . . . . . . .	 002C	     Byte
  secondaryCharBlock . . . . . .	 002D	     Byte
  miscStateInfo  . . . . . . . .	 002E	     Byte
  videoMemAvail  . . . . . . . .	 0032	     Byte
  savePointerStateInfo . . . . .	 0033	     Byte


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 02A6	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 029D	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CalcDelay  . . . . . . . . . . .	P Near	 0048	  _TEXT	Length= 0032 Public STDCALL
  top  . . . . . . . . . . . . .	L Near	 0052	  _TEXT	
  skip . . . . . . . . . . . . .	L Near	 0079	  _TEXT	
CalcNoteFreq . . . . . . . . . .	P Near	 01F0	  _TEXT	Length= 003A Public STDCALL
  HighTop  . . . . . . . . . . .	L Near	 01F9	  _TEXT	
  HighSkip . . . . . . . . . . .	L Near	 0207	  _TEXT	
  LowTop . . . . . . . . . . . .	L Near	 0211	  _TEXT	
  LowSkip  . . . . . . . . . . .	L Near	 021F	  _TEXT	
  Break  . . . . . . . . . . . .	L Near	 0226	  _TEXT	
Clrscr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
CreateFile . . . . . . . . . . .	P Near	 0164	  _TEXT	Length= 0014 Public STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
FluteState . . . . . . . . . . .	P Near	 0109	  _TEXT	Length= 005B Public STDCALL
  FluteTop . . . . . . . . . . .	L Near	 0113	  _TEXT	
  SkipExit . . . . . . . . . . .	L Near	 0122	  _TEXT	
  SkipPlay . . . . . . . . . . .	L Near	 012B	  _TEXT	
  SkipCheck  . . . . . . . . . .	L Near	 0140	  _TEXT	
  mute . . . . . . . . . . . . .	L Near	 0159	  _TEXT	
  break  . . . . . . . . . . . .	L Near	 015E	  _TEXT	
GetCommandtail . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
HoldIt . . . . . . . . . . . . .	P Near	 00F0	  _TEXT	Length= 0019 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
MyDelay  . . . . . . . . . . . .	P Near	 0000	  _TEXT	Length= 000F Public STDCALL
MyWriteInt . . . . . . . . . . .	P Near	 01C8	  _TEXT	Length= 0028 Public STDCALL
  MyNext . . . . . . . . . . . .	L Near	 01CF	  _TEXT	
  MyTop  . . . . . . . . . . . .	L Near	 01E0	  _TEXT	
PlayState  . . . . . . . . . . .	P Near	 007A	  _TEXT	Length= 003C Public STDCALL
  PlayTop  . . . . . . . . . . .	L Near	 008C	  _TEXT	
  EOF  . . . . . . . . . . . . .	L Near	 00B2	  _TEXT	
Random32 . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
SafeRead . . . . . . . . . . . .	P Near	 022A	  _TEXT	Length= 001A Public STDCALL
SetSpeakerFrequency  . . . . . .	P Near	 00DB	  _TEXT	Length= 0015 Public STDCALL
SetTextColor . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
SetTimerCount  . . . . . . . . .	P Near	 00C8	  _TEXT	Length= 0013 Public STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
SpeakerOff . . . . . . . . . . .	P Near	 00BF	  _TEXT	Length= 0009 Public STDCALL
SpeakerOn  . . . . . . . . . . .	P Near	 00B6	  _TEXT	Length= 0009 Public STDCALL
Str_compare  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
TrueDelay  . . . . . . . . . . .	P Near	 000F	  _TEXT	Length= 0039 Public STDCALL
  Skip1  . . . . . . . . . . . .	L Near	 0025	  _TEXT	
  Skip2  . . . . . . . . . . . .	L Near	 0030	  _TEXT	
  DelayTop . . . . . . . . . . .	L Near	 0039	  _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteNotes . . . . . . . . . . .	P Near	 0178	  _TEXT	Length= 0050 Public STDCALL
  WriteHighTop . . . . . . . . .	L Near	 0185	  _TEXT	
  WriteHighSkip  . . . . . . . .	L Near	 0193	  _TEXT	
  WriteLowTop  . . . . . . . . .	L Near	 019D	  _TEXT	
  WriteLowSkip . . . . . . . . .	L Near	 01AB	  _TEXT	
  WriteBreak . . . . . . . . . .	L Near	 01B2	  _TEXT	
WriteString  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 0244	  _TEXT	Length= 0059 Public STDCALL
  MenuLoop . . . . . . . . . . .	L Near	 0258	  _TEXT	
  SkipFluteState . . . . . . . .	L Near	 027C	  _TEXT	
  SkipPlayState  . . . . . . . .	L Near	 0291	  _TEXT	
  escape . . . . . . . . . . . .	L Near	 0298	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0003h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@cmdline . . . . . . . . . . . .	Text   	 OFFSET __98765765cmdline
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
ACTION_CREATED_OPENED  . . . . .	Number	 0002h	 
ACTION_OPENED  . . . . . . . . .	Number	 0001h	 
ACTION_REPLACED_OPENED . . . . .	Number	 0003h	 
ALT  . . . . . . . . . . . . . .	Number	 0008h	 
BUFFER_SIZE  . . . . . . . . . .	Number	 0050h	 
CALLBIOS . . . . . . . . . . . .	Number	 0010h	 
CALLDOS  . . . . . . . . . . . .	Number	 0021h	 
CLK_FREQ . . . . . . . . . . . .	DWord	 014D	  _DATA	
CTRL . . . . . . . . . . . . . .	Number	 0004h	 
CharBuffer . . . . . . . . . . .	Word	 0007	  _DATA	
DOSDATA  . . . . . . . . . . . .	Number	 0040h	 
DoneWaiting  . . . . . . . . . .	Byte	 0172	  _DATA	
FILE_CREATE  . . . . . . . . . .	Number	 0010h	 
FILE_OPEN  . . . . . . . . . . .	Number	 0001h	 
FILE_TRUNCATE  . . . . . . . . .	Number	 0002h	 
FileHandle . . . . . . . . . . .	Word	 0001	  _DATA	
HighKeys . . . . . . . . . . . .	Word	 009D	  _DATA	
HighNotes  . . . . . . . . . . .	Word	 0009	  _DATA	
KEYFLAG  . . . . . . . . . . . .	Number	 0017h	 
LIGHT_BLUE . . . . . . . . . . .	Number	 0009h	 
LIGHT_CYAN . . . . . . . . . . .	Number	 000Bh	 
LIGHT_GRAY . . . . . . . . . . .	Number	 0007h	 
LIGHT_GREEN  . . . . . . . . . .	Number	 000Ah	 
LIGHT_MAGENTA  . . . . . . . . .	Number	 000Dh	 
LIGHT_RED  . . . . . . . . . . .	Number	 000Ch	 
LastFreq . . . . . . . . . . . .	Word	 0003	  _DATA	
LastKey  . . . . . . . . . . . .	Word	 0005	  _DATA	
LowKeys  . . . . . . . . . . . .	Word	 00ED	  _DATA	
LowNotes . . . . . . . . . . . .	Word	 0059	  _DATA	
OPEN_ACCESS_READONLY . . . . . .	Number	 0000h	 
OPEN_ACCESS_READWRITE  . . . . .	Number	 0002h	 
OPEN_ACCESS_RO_NOMODLASTACCESS .	Number	 0004h	 
OPEN_ACCESS_WRITEONLY  . . . . .	Number	 0001h	 
OPEN_FLAGS_ALIAS_HINT  . . . . .	Number	 0400h	 
OPEN_FLAGS_COMMIT  . . . . . . .	Number	 4000h	 
OPEN_FLAGS_NOCRITERR . . . . . .	Number	 2000h	 
OPEN_FLAGS_NOINHERIT . . . . . .	Number	 0080h	 
OPEN_FLAGS_NO_BUFFERING  . . . .	Number	 0100h	 
OPEN_FLAGS_NO_COMPRESS . . . . .	Number	 0200h	 
OPEN_SHARE_COMPATIBLE  . . . . .	Number	 0000h	 
OPEN_SHARE_DENYNONE  . . . . . .	Number	 0040h	 
OPEN_SHARE_DENYREADWRITE . . . .	Number	 0010h	 
OPEN_SHARE_DENYREAD  . . . . . .	Number	 0030h	 
OPEN_SHARE_DENYWRITE . . . . . .	Number	 0020h	 
SHIFT  . . . . . . . . . . . . .	Number	 0003h	 
SPEAKER_ON . . . . . . . . . . .	Number	 0003h	 
SPEAKER_PORT . . . . . . . . . .	Number	 0061h	 
SetOn  . . . . . . . . . . . . .	Byte	 0000	  _DATA	
SettingFreq  . . . . . . . . . .	Byte	 0131	  _DATA	
TERMINATE  . . . . . . . . . . .	Number	 4C00h	 
TIMER_CONTROL_PORT . . . . . . .	Number	 0043h	 
TIMER_DATA_PORT  . . . . . . . .	Number	 0042h	 
TIMER_READY  . . . . . . . . . .	Number	 00B6h	 
Waiting  . . . . . . . . . . . .	Byte	 0151	  _DATA	
_A_ARCH  . . . . . . . . . . . .	Number	 0020h	 
_A_HIDDEN  . . . . . . . . . . .	Number	 0002h	 
_A_NORMAL  . . . . . . . . . . .	Number	 0000h	 
_A_RDONLY  . . . . . . . . . . .	Number	 0001h	 
_A_SYSTEM  . . . . . . . . . . .	Number	 0004h	 
_A_VOLID . . . . . . . . . . . .	Number	 0008h	 
black  . . . . . . . . . . . . .	Number	 0000h	 
blue . . . . . . . . . . . . . .	Number	 0001h	 
brown  . . . . . . . . . . . . .	Number	 0006h	 
buffer . . . . . . . . . . . . .	Byte	 0199	  _DATA	
cyan . . . . . . . . . . . . . .	Number	 0003h	 
exit . . . . . . . . . . . . . .	Text   	 .EXIT
fluteprompt  . . . . . . . . . .	Byte	 0229	  _DATA	
gray . . . . . . . . . . . . . .	Number	 0008h	 
green  . . . . . . . . . . . . .	Number	 0002h	 
hexArray . . . . . . . . . . . .	Byte	 0189	  _DATA	
lightBlue  . . . . . . . . . . .	Number	 0009h	 
lightCyan  . . . . . . . . . . .	Number	 000Bh	 
lightGray  . . . . . . . . . . .	Number	 0007h	 
lightGreen . . . . . . . . . . .	Number	 000Ah	 
lightMagenta . . . . . . . . . .	Number	 000Dh	 
lightRed . . . . . . . . . . . .	Number	 000Ch	 
magenta  . . . . . . . . . . . .	Number	 0005h	 
mainprompt . . . . . . . . . . .	Byte	 01EB	  _DATA	
playprompt . . . . . . . . . . .	Byte	 0285	  _DATA	
recordinstruct . . . . . . . . .	Byte	 0240	  _DATA	
red  . . . . . . . . . . . . . .	Number	 0004h	 
white  . . . . . . . . . . . . .	Number	 000Fh	 
yellow . . . . . . . . . . . . .	Number	 000Eh	 

	   0 Warnings
	   0 Errors
